类：
    定义一个含有泛型的类  模拟 ArrayList集合
    泛型是一个位置的数据类型，当我们不知道用什么数据类型的时候们可以使用泛型
    泛型可以接受任意累心的数据类型，可以使用 Integer、String、Student
    创建对象的时候确定泛型的数据类型

    public class GenericClass<E> {
        private E name;

        public E getName() {
            return name;
        }

        public void setName(E name) {
            this.name = name;
        }
// 使用泛型  Integer
GenericClass<Integer> gc2 = new GenericClass<>();
gc2.setName(12);


方法：
定义含有泛型的方法：泛型定义咋哦方法的修饰符和返回值之间
    修饰符 <泛型> 返回值类型 方法名(参数列表使用泛型)){  方法体}

    含有泛型的方法，在调用方法的时候确定泛型的数据类型
    传递什么类型的参数，泛型就是什么类型

    public class GenericMethod {
        //定义一个含有泛型的方法
        public <M> void method01(M m){
            System.out.println(m);
        }

        //定义一个含有泛型的的静态方法
        public static <S> void method02(S s){
            System.out.println(s);
        }

    }

GenericMethod gm = new GenericMethod();
gm.method01("alex");
gm.method01(123);
gm.method01('a');
gm.method01(true);
// 静态方法，通过类名.方法名(参数)  可以直接使用
GenericMethod.method02("这是静态方法");


接口：
1.
    含有泛型的接口，第一种使用方式： 定义接口的实现类，实现接口，指定接口的泛型
    public interface Iterator<E> {
        E next();
    }

    Scanner 类实现了 Iterator 接口，并指定接口的泛型为String，所以重写的 next()方法泛型默认就是字符串
    public final class Scanner implements Iterator<String> {
        public String next() {}
    }
// 创建 GenericInterfaceImpl对象
GenericInterfaceImpl gi1 = new GenericInterfaceImpl();
gi1.method("alex");

2.
    含有泛型的接口第二种使用方式：接口使用使用什么泛型，实现类就是用什么泛型，类跟着接口走
    就相当于定义了一个含有泛型的类，创建对象的使用确定泛型的类型
    public interface List<E>{
        boolean add(E e);
        E get(itn index);
    }
    public class ArrayList<E> implements List<E>{
        public boolean add(E e) {}
        public E get(itn index) {}
    }
GenericInterfaceImpl2<String> impl2 = new GenericInterfaceImpl2<String>();
impl2.method("alex");

GenericInterfaceImpl2<Double> impl21 = new GenericInterfaceImpl2<>();
impl21.method(2.333);